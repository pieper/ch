#!/usr/bin/env node
/**
 * A command line Chronicle utility.
 *
 * @author Steve Pieper <pieper@isomics.com>
 *
 * 3D Slicer License
 * Copyright (c) 2014 Isomics, Inc.
 * All rights reserved.
 */

'use strict';

exports.version = "0.0.1"

var async = require('async');
var fs = require('fs');
var path = require('path');
var program = require('commander');
var _ = require('underscore');
var _s = require('underscore.string');

var chlib = require('..')

// Note: some program structure derived from
// https://www.npmjs.org/package/jsonld

// common output function
function _output(data, cmd, callback) {
  if(typeof data === 'object') {
    var output = JSON.stringify(data, null, cmd.indent);
    process.stdout.write(output);
  } else if(typeof data === 'string') {
    process.stdout.write(data.trim());
  } else {
    process.stdout.write(data);
  }
  if(cmd.newline) {
    process.stdout.write('\n');
  }
  callback();
}

// final async call to handle errors
function _final(err, results) {
  if(err) {
    if(err instanceof Error) {
      console.log(err.toString());
    } else if(typeof err === 'object') {
      console.log('Error:', JSON.stringify(err, null, 2));
    } else {
      console.log('Error:', err);
    }
    process.exit(1);
  }
}

// init common command options
function _chCommand(command) {
  command
    .option('-H, --host <host>', 'host [localhost]')
    .option('-P, --port <port>', 'port [5984]')
    .option('-D, --database <database>', 'database name [Chronicle]');
  return command;
}

program.version(module.exports.version);

_chCommand(program.command('help [command]'))
  .description('get detailed help')
  .action(function(command,commands) {
    command = command || 'all';
    switch(command) {
      case 'all' :
      case 'ls' :
        console.log("TODO print the per-command usage");
        console.log("TODO then parse ch.README.txt for more help text");
        break;
      default: console.log("Unknown command: ", command);
    }
  });

_chCommand(program.command('ls [spec]'))
  .description('list entries that match [spec]')
  .option('-l, --long', 'Long listing [false]')
  .option('-r, --reverse', 'Reverse listing [false]')
  .option('-t, --time', 'Sort by database insert time [false]')
  .option('-f, --follow', 'Print new matches as they are inserted (cannot use with -r or -t)')
  .action(function(spec) {
    // Open the connection to the database
    var ch = new(chlib.ch.Connection)();
    var options = {
      ch : ch,
      eachCallback : console.log,
    }
    if (spec) {
      options.spec = spec;
    }
    ch.tags.each(options);
  }, _final);


_chCommand(program.command('add <dir|file ...>'))
  .description('add data from filesystem to Chronicle')
  .option('-n, --no-recurse', 'Do not recurse through the directory [false]')
  .action(function(input, cmd) {
    input = input || '-';
    var reqopts = _requestOptions(cmd);
    async.auto({
      readInput: function(callback, results) {
        jsonld.request(input, reqopts, function(err, res, data) {
          callback(err, data);
        });
      },
      process: ['readInput', function(callback, results) {
        var options = _jsonLdOptions(cmd);
        options.format = cmd.format || 'json';
        if(cmd.nquads) {
          options.format = 'application/nquads';
        }
        if(cmd.json) {
          options.format = 'application/json';
        }

        switch(options.format.toLowerCase()) {
          case 'nquads':
          case 'n-quads':
          case 'application/nquads':
            // normalize format for toRDF
            options.format = 'application/nquads';
            jsonld.toRDF(results.readInput, options,
              function(err, dataset) {
                callback(err, dataset);
              });
            break;
          case 'json':
          case 'jsonld':
          case 'json-ld':
          case 'ld+json':
          case 'application/json':
          case 'application/ld+json':
            // just doing basic JSON formatting
            callback(null, results.readInput);
            break;
          default:
            throw new Error('ERROR: Unknown format: ' + options.format);
        }
      }],
      output: ['process', function(callback, results) {
        _output(results.process, cmd, callback);
      }]
    }, _final);
  });

/*
_jsonLdCommand(program.command('compact <filename|URL ...>'))
  .description('compact JSON-LD')
  .option('-c, --context <filename|URL>', 'context filename or URL')
  .option('-S, --no-strict', 'disable strict mode')
  .option('-A, --no-compact-arrays',
    'disable compacting arrays to single values')
  .option('-g, --graph', 'always output top-level graph [false]')
  .action(function(input, cmd) {
    input = input || '-';
    var reqopts = _requestOptions(cmd);
    async.auto({
      readContext: function(callback, results) {
        // use built-in context loader
        if(_isHTTP(cmd.context)) {
          return callback(null, cmd.context);
        }
        jsonld.request(cmd.context, reqopts, function(err, res, data) {
          callback(err, data);
        });
      },
      readInput: function(callback, results) {
        jsonld.request(input, reqopts, function(err, res, data) {
          callback(err, data);
        });
      },
      process: ['readContext', 'readInput', function(callback, results) {
        var options = _jsonLdOptions(cmd);
        options.strict = cmd.strict;
        options.compactArrays = cmd.compactArrays;
        options.graph = !!cmd.graph;

        jsonld.compact(results.readInput, results.readContext, options,
          function(err, compacted) {
            callback(err, compacted);
          });
      }],
      output: ['process', function(callback, results) {
        _output(results.process, cmd, callback);
      }]
    }, _final);
  });

_jsonLdCommand(program.command('expand [filename|URL|-]'))
  .description('expand JSON-LD')
  .option('    --keep-free-floating-nodes', 'keep free-floating nodes')
  .action(function(input, cmd) {
    input = input || '-';
    var reqopts = _requestOptions(cmd);
    async.auto({
      readInput: function(callback, results) {
        jsonld.request(input, reqopts, function(err, res, data) {
          callback(err, data);
        });
      },
      expand: ['readInput', function(callback, results) {
        var options = _jsonLdOptions(cmd);
        options.keepFreeFloatingNodes = cmd.keepFreeFloatingNodes;

        jsonld.expand(results.readInput, options,
          function(err, expanded) {
            callback(err, expanded);
          });
      }],
      output: ['process', function(callback, results) {
        _output(results.process, cmd, callback);
      }]
    }, _final);
  });

_jsonLdCommand(program.command('flatten [filename|URL|-]'))
  .description('flatten JSON-LD')
  .option('-c, --context <filename|URL>',
    'context filename or URL for compaction [none]')
  .action(function(input, cmd) {
    input = input || '-';
    var reqopts = _requestOptions(cmd);
    async.auto({
      readInput: function(callback, results) {
        jsonld.request(input, reqopts, function(err, res, data) {
          callback(err, data);
        });
      },
      readContext: function(callback, results) {
        if(cmd.context) {
          // use built-in context loader
          if(_isHTTP(cmd.context)) {
            return callback(null, cmd.context);
          }
          return jsonld.request(cmd.context, reqopts, function(err, res, data) {
            callback(err, data);
          });
        }
        callback(null, null);
      },
      process: ['readInput', 'readContext', function(callback, results) {
        var options = _jsonLdOptions(cmd);

        jsonld.flatten(results.readInput, results.readContext, options,
          function(err, flattened) {
            callback(err, flattened);
          });
      }],
      output: ['process', function(callback, results) {
        _output(results.process, cmd, callback);
      }]
    }, _final);
  });

_jsonLdCommand(program.command('frame [filename|URL|-]'))
  .description('flatten JSON-LD')
  .option('-f, --frame <filename|URL>', 'frame to use')
  .option('    --embed <embed>', 'default @embed flag [true]', _.str.toBoolean, true)
  .option('    --explicit <explicit>',
    'default @explicit flag [false]', boolify, false)
  .option('    --omit-default <omit-default>',
    'default @omitDefault flag [false]', boolify, false)
  .action(function(input, cmd) {
    input = input || '-';
    async.auto({
      readInput: function(callback, results) {
        jsonld.request(input, reqopts, function(err, res, data) {
          callback(err, data);
        });
      },
      readFrame: function(callback, results) {
        jsonld.request(cmd.frame, reqopts, function(err, res, data) {
          callback(err, data);
        });
      },
      process: ['readInput', 'readFrame', function(callback, results) {
        var options = _jsonLdOptions(cmd);
        options.embed = cmd.embed;
        options.explicit = cmd.explicit;
        options.omitDefault = cmd.omitDefault;

        jsonld.frame(results.readInput, results.readFrame, options,
          function(err, framed) {
            callback(err, framed);
          });
      }],
      output: ['process', function(callback, results) {
        _output(results.process, cmd, callback);
      }]
    }, _final);
  });

_jsonLdCommand(program.command('normalize [filename|URL|-]'))
  .description('normalize JSON-LD')
  .option('-f, --format <format>',
    'format to output (\'application/nquads\' for N-Quads')
  .option('-q, --nquads', 'use \'application/nquads\' format')
  .action(function(input, cmd) {
    input = input || '-';
    var reqopts = _requestOptions(cmd);
    async.auto({
      readInput: function(callback, results) {
        jsonld.request(input, reqopts, function(err, res, data) {
          callback(err, data);
        });
      },
      process: ['readInput', function(callback, results) {
        var options = _jsonLdOptions(cmd);
        if(cmd.nquads) {
          options.format = 'application/nquads';
        }
        if(cmd.format) {
          options.format = cmd.format;
        }

        jsonld.normalize(results.readInput, options,
          function(err, normalized) {
            callback(err, normalized);
          });
      }],
      output: ['process', function(callback, results) {
        _output(results.process, cmd, callback);
      }]
    }, _final);
  });
*/

program.parse(process.argv);


// vim: syntax=javascript
